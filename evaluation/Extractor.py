import argparse
import operator

class Extractor():
    def __init__(self, input_file=None, output_file=None, extract_mode=0):
        """

        :param input_file:
        :param output_file:
        :param extract_mode: 0 is time-bms, 1 is time-hit_cnt
        """
        self._input_file = input_file
        self._output_file = output_file
        self._extract_mode = extract_mode
        self._bms_time = {}

    def _extract_wrapper(self, str_left, str_right):
        """

        :param str_left: The string you want parse from the file, could be time
        :param str_right: The other string you want parse from the file, could be map size or hit counts
        :return: None
        """
        # the input file should be generated by bitmap-size tool, which was developed by supermole!
        time = -1
        map_size = -1

        with open(self._input_file, 'r') as f:
            content = f.readlines()
            for line in content:
                if "Attempting dry run" in line:
                    time = int(line.split(str_left)[1].split(",")[0], 10)
                elif str_right in line:
                    map_size = int(line.split(str_right)[1].split(",")[0], 10)
                else:
                    continue

                if (time != -1) and (map_size != -1):
                    self._bms_time[time] = map_size
                    time = -1
                    map_size = -1
                else:
                    continue

        self._bms_time = dict(sorted(self._bms_time.items(), key=operator.itemgetter(0)))

        bms_pre = 0
        writing_content = ""

        with open(self._output_file, 'w') as f:
            for time, bms in self._bms_time.items():
                if bms_pre == 0:
                    writing_content += str(time)
                    writing_content += ": "
                    writing_content += str(bms)
                    writing_content += "\n"

                    bms_pre = bms
                elif bms < bms_pre:
                    writing_content += str(time)
                    writing_content += ": "
                    writing_content += str(bms)
                    writing_content += "\n"

                    bms_pre = bms
                else:
                    continue

            f.write(writing_content)

    def _extract_poc_dec_info(self, str_left, str_right):
        """

                :param str_left: The string you want parse from the file, could be time
                :param str_right: The other string you want parse from the file, could be map size or hit counts
                :return: None
                """
        # the input file should be generated by bitmap-size tool, which was developed by supermole!
        time = -1
        map_size = -1

        with open(self._input_file, 'r') as f:
            content = f.readlines()
            for line in content:
                if "Attempting dry run" in line:
                    time = int(line.split(str_left)[1].split(",")[0], 10)
                elif str_right in line:
                    map_size = int(line.split(str_right)[1].split(",")[0], 10)
                else:
                    continue

                if (time != -1) and (map_size != -1):
                    self._bms_time[time] = map_size
                    time = -1
                    map_size = -1
                else:
                    continue

        self._bms_time = dict(sorted(self._bms_time.items(), key=operator.itemgetter(0)))

        writing_content = ""

        with open(self._output_file, 'w') as f:
            for time, bms in self._bms_time.items():
                writing_content += str(time)
                writing_content += ": "
                writing_content += str(bms)
                writing_content += "\n"

            f.write(writing_content)

    def extractor(self):
        if self._extract_mode == 0:
            self._extract_wrapper("time:", "map size = ")
        elif self._extract_mode == 1:
            self._extract_wrapper("time:", "hit counts = ")
        elif self._extract_mode == 2:
            self._extract_poc_dec_info("id:", "map size = ")



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", help="input_file path")
    parser.add_argument("-o", help="output_file path")
    parser.add_argument("-m", help="extract mode", type=int, default=0)

    args = parser.parse_args()

    P = Extractor(args.i, args.o, args.m)
    P.extractor()

    print("Finished!\n")


if __name__ == "__main__":
    main()